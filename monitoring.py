import os
import json
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from google_play_scraper import app
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import time

# üîÑ –ß–∏—Ç–∞–µ–º GOOGLE_CREDENTIALS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
creds_json = os.getenv("GOOGLE_CREDENTIALS")
if not creds_json:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GOOGLE_CREDENTIALS –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

try:
    creds_dict = json.loads(creds_json)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –≤ —Å–ª–æ–≤–∞—Ä—å
except json.JSONDecodeError as e:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: GOOGLE_CREDENTIALS –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON!") from e

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
print("üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...")
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

spreadsheet_id = "1DpbYJ5f6zdhIl1zDtn6Z3aCHZRDFTaqhsCrkzNM9Iqo"
sheet = client.open_by_key(spreadsheet_id).sheet1

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç "Changes Log", –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º
try:
    log_sheet = client.open_by_key(spreadsheet_id).worksheet("Changes Log")
except gspread.exceptions.WorksheetNotFound:
    print("‚ùå –õ–∏—Å—Ç 'Changes Log' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ...")
    log_sheet = client.open_by_key(spreadsheet_id).add_worksheet(title="Changes Log", rows="1000", cols="4")
    log_sheet.append_row(["–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–¢–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è", "–ù–æ–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "Package"])  # –ó–∞–≥–æ–ª–æ–≤–∫–∏

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥
log_buffer = []

def log_change(change_type, app_number, package_name):
    print(f"üìå –õ–æ–≥–∏—Ä—É–µ–º: {change_type} - {package_name}")
    log_buffer.append([datetime.today().strftime("%Y-%m-%d"), change_type, app_number, package_name])

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Google Sheets (batch update)
def flush_log():
    global log_buffer
    if log_buffer:
        try:
            log_sheet.append_rows(log_buffer)
            print(f"‚úÖ –í –ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω–æ {len(log_buffer)} –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            log_buffer = []  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ 'Changes Log': {e}")

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
def fetch_google_play_data(package_name, app_number, existing_status, existing_release_date, existing_not_found_date):
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {package_name}...")

        time.sleep(0.5)
        data = app(package_name)

        status = "ready"

        release_date = data.get("released")
        last_updated = data.get("updated")

        def convert_timestamp(value):
            if isinstance(value, int) and value > 1000000000:
                return datetime.utcfromtimestamp(value).strftime("%Y-%m-%d")
            return value

        release_date = convert_timestamp(release_date)
        last_updated = convert_timestamp(last_updated)

        final_date = release_date if release_date else last_updated or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        not_found_date = ""

        print(f"üìÖ –î–∞—Ç–∞ {package_name}: {final_date}")
        print(f"üîÑ {existing_status} ‚Üí {status}")

        # –õ–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if existing_status in ["", None]:  
            log_change("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", app_number, package_name)
        elif existing_status == "ban" and status == "ready":
            log_change("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ —Å—Ç–æ—Ä–µ", app_number, package_name)
        elif existing_status == "ready" and status == "ban":
            log_change("–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", app_number, package_name)

        return [package_name, status, final_date, not_found_date]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {package_name}: {e}")
        status = "ban"
        not_found_date = existing_not_found_date or datetime.today().strftime("%Y-%m-%d")

        # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ
        if existing_status not in ["ban", None, ""]:
            log_change("–ë–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", app_number, package_name)

        return [package_name, status, existing_release_date, not_found_date]

# **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π**
def fetch_all_data():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...")
    all_values = sheet.get_all_values()[1:]  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    apps_list = []

    for row in all_values:
        if len(row) >= 8 and row[7]:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –ø–∞–∫–µ—Ç
            apps_list.append((row[0], row[7], row[3], row[5], row[6]))

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(apps_list)} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    with ThreadPoolExecutor(max_workers=5) as executor:
        return list(executor.map(lambda x: fetch_google_play_data(x[1], x[0], x[2], x[3], x[4]), apps_list))

# **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets**
def update_google_sheets(sheet, data):
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets...")

    updates = []
    ready_count = 0  

    for i, row in enumerate(sheet.get_all_values()[1:], start=2):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
        package_name = row[7]
        for app_data in data:
            if app_data[0] == package_name:
                updates.append({"range": f"D{i}", "values": [[app_data[1]]]})
                updates.append({"range": f"F{i}", "values": [[app_data[2]]]})
                updates.append({"range": f"G{i}", "values": [[app_data[3]]]})

                if app_data[1] == "ready":
                    ready_count += 1
                break

    if updates:
        try:
            sheet.batch_update(updates)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {ready_count}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    try:
        sheet.update(range_name="J2", values=[[ready_count]])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")

# **–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è**
def main():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    data = fetch_all_data()
    update_google_sheets(sheet, data)
    flush_log()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
